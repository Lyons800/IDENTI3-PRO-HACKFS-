{"ast":null,"code":"import React from'react';import{BellIcon,SpeakerphoneIcon}from\"@heroicons/react/solid\";import{Col,Row,Alert,Button,Container}from'react-bootstrap';import Documentation from\"components/Documentation\";export default(function(){return/*#__PURE__*/React.createElement(\"article\",null,/*#__PURE__*/React.createElement(Container,{className:\"px-0\"},/*#__PURE__*/React.createElement(Row,{className:\"d-flex flex-wrap flex-md-nowrap align-items-center py-4\"},/*#__PURE__*/React.createElement(Col,{className:\"d-block mb-4 mb-md-0\"},/*#__PURE__*/React.createElement(\"h1\",{className:\"h2\"},\"Alerts\"),/*#__PURE__*/React.createElement(\"p\",{className:\"mb-0\"},\"Use alerts to provide contextual feedback to your users based on their input and behaviour.\"))),/*#__PURE__*/React.createElement(Documentation,{title:\"Example\",description:/*#__PURE__*/React.createElement(\"p\",null,\"The \",/*#__PURE__*/React.createElement(\"code\",null,\"<Alert>\"),\" component can be used to show your users error, success, informational or warning messages. Use component properties such as  \",/*#__PURE__*/React.createElement(\"code\",null,\"variant=\\\"primary\"),\" or \",/*#__PURE__*/React.createElement(\"code\",null,\"variant=\\\"secondary\\\"\"),\" to use the colors from the Sass variables:\"),scope:{Alert:Alert},imports:\"import { Alert } from 'react-bootstrap';\",example:\"<React.Fragment>\\n  <Alert variant=\\\"primary\\\">\\n    A simple primary alert \\u2014 check it out!\\n  </Alert>\\n  <Alert variant=\\\"secondary\\\">\\n    A simple secondary alert \\u2014 check it out!\\n  </Alert>\\n  <Alert variant=\\\"success\\\">\\n    A simple success alert \\u2014 check it out!\\n  </Alert>\\n  <Alert variant=\\\"danger\\\">\\n    A simple danger alert \\u2014 check it out!\\n  </Alert>\\n  <Alert variant=\\\"warning\\\">\\n    A simple warning alert \\u2014 check it out!\\n  </Alert>\\n  <Alert variant=\\\"info\\\">\\n    A simple info alert \\u2014 check it out!\\n  </Alert>\\n  <Alert variant=\\\"gray-50\\\">\\n    A simple light alert \\u2014 check it out!\\n  </Alert>\\n  <Alert variant=\\\"gray-800\\\">\\n    A simple dark alert \\u2014 check it out!\\n  </Alert>\\n</React.Fragment>\"}),/*#__PURE__*/React.createElement(Documentation,{title:\"Dismissable alerts\",description:/*#__PURE__*/React.createElement(\"p\",null,\"The \",/*#__PURE__*/React.createElement(\"code\",null,\"<Alert>\"),\" component can be used to create an alert component that can be closed by clicking on the close icon by adding the \",/*#__PURE__*/React.createElement(\"code\",null,\"show\"),\" and \",/*#__PURE__*/React.createElement(\"code\",null,\"onClose\"),\" properties. Additionally, you can also use the \",/*#__PURE__*/React.createElement(\"code\",null,\"<FontAwesomeIcon>\"),\" component to add an icon inside the alert component.\"),scope:{Alert:Alert,Button:Button,SpeakerphoneIcon:SpeakerphoneIcon},imports:\"import { Alert, Button } from 'react-bootstrap';\\nimport { SpeakerphoneIcon } from \\\"@heroicons/react/solid\\\";\",example:\"function DismissableAlerts() {\\n  const [hiddenAlerts, setHiddenAlerts] = React.useState([]);\\n\\n  const onClose = (alertId) => {\\n    const hiddenAlertsUpdated = [...hiddenAlerts, alertId];\\n    setHiddenAlerts(hiddenAlertsUpdated);\\n  };\\n\\n  const shouldShowAlert = (alertId) => (\\n    hiddenAlerts.indexOf(alertId) === -1\\n  );\\n\\n  return(\\n    <React.Fragment>\\n      <Alert\\n        variant=\\\"primary\\\"\\n        show={shouldShowAlert(\\\"primary\\\")}\\n        onClose={() => onClose(\\\"primary\\\")}>\\n\\n        <div className=\\\"d-flex justify-content-between\\\">\\n          <div>\\n            <SpeakerphoneIcon className=\\\"icon icon-xs me-1\\\" />\\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\\n          </div>\\n          <Button variant=\\\"close\\\" size=\\\"sm\\\" onClick={() => onClose(\\\"primary\\\")} />\\n        </div>\\n      </Alert>\\n\\n      <Alert\\n        variant=\\\"secondary\\\"\\n        show={shouldShowAlert(\\\"secondary\\\")}\\n        onClose={() => onClose(\\\"secondary\\\")}>\\n\\n        <div className=\\\"d-flex justify-content-between\\\">\\n          <div>\\n            <SpeakerphoneIcon className=\\\"icon icon-xs me-1\\\" />\\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\\n          </div>\\n          <Button variant=\\\"close\\\" size=\\\"sm\\\" onClick={() => onClose(\\\"secondary\\\")} />\\n        </div>\\n      </Alert>\\n      \\n      <Alert\\n        variant=\\\"danger\\\"\\n        show={shouldShowAlert(\\\"danger\\\")}\\n        onClose={() => onClose(\\\"danger\\\")}>\\n\\n        <div className=\\\"d-flex justify-content-between\\\">\\n          <div>\\n            <SpeakerphoneIcon className=\\\"icon icon-xs me-1\\\" />\\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\\n          </div>\\n          <Button variant=\\\"close\\\" size=\\\"sm\\\" onClick={() => onClose(\\\"danger\\\")} />\\n        </div>\\n      </Alert>\\n\\n      <Alert\\n        variant=\\\"success\\\"\\n        show={shouldShowAlert(\\\"success\\\")}\\n        onClose={() => onClose(\\\"success\\\")}>\\n\\n        <div className=\\\"d-flex justify-content-between\\\">\\n          <div>\\n            <SpeakerphoneIcon className=\\\"icon icon-xs me-1\\\" />\\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\\n          </div>\\n          <Button variant=\\\"close\\\" size=\\\"sm\\\" onClick={() => onClose(\\\"success\\\")} />\\n        </div>\\n      </Alert>\\n\\n      <Alert\\n        variant=\\\"warning\\\"\\n        show={shouldShowAlert(\\\"warning\\\")}\\n        onClose={() => onClose(\\\"warning\\\")}>\\n\\n        <div className=\\\"d-flex justify-content-between\\\">\\n          <div>\\n            <SpeakerphoneIcon className=\\\"icon icon-xs me-1\\\" />\\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\\n          </div>\\n          <Button variant=\\\"close\\\" size=\\\"sm\\\" onClick={() => onClose(\\\"warning\\\")} />\\n        </div>\\n      </Alert>\\n\\n      <Alert\\n        variant=\\\"gray-50\\\"\\n        show={shouldShowAlert(\\\"light\\\")}\\n        onClose={() => onClose(\\\"light\\\")}>\\n\\n        <div className=\\\"d-flex justify-content-between\\\">\\n          <div>\\n            <SpeakerphoneIcon className=\\\"icon icon-xs me-1\\\" />\\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\\n          </div>\\n          <Button variant=\\\"close\\\" size=\\\"sm\\\" onClick={() => onClose(\\\"light\\\")} />\\n        </div>\\n      </Alert>\\n\\n      <Alert\\n        variant=\\\"gray-800\\\"\\n        show={shouldShowAlert(\\\"dark\\\")}\\n        onClose={() => onClose(\\\"dark\\\")}>\\n\\n        <div className=\\\"d-flex justify-content-between\\\">\\n          <div>\\n            <SpeakerphoneIcon className=\\\"icon icon-xs me-1\\\" />\\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\\n          </div>\\n          <Button variant=\\\"close\\\" size=\\\"sm\\\" onClick={() => onClose(\\\"dark\\\")} />\\n        </div>\\n      </Alert>\\n    </React.Fragment>\\n  );\\n}\\n\\nrender( <DismissableAlerts /> );\"}),/*#__PURE__*/React.createElement(Documentation,{title:\"Alerts with extra content\",description:/*#__PURE__*/React.createElement(\"p\",null,\"The following \",/*#__PURE__*/React.createElement(\"code\",null,\"<Alert>\"),\" components are useful when you want to give more information and context to your users:\"),scope:{Alert:Alert,BellIcon:BellIcon},imports:\"import { Alert } from 'react-bootstrap';\\nimport { BellIcon } from \\\"@heroicons/react/solid\\\";\",example:\"<React.Fragment>\\n  <Alert variant=\\\"primary\\\">\\n    <Alert.Heading className=\\\"d-flex align-items-center mt-2\\\">\\n      <BellIcon className=\\\"icon icon-md me-2\\\" />\\n      Well done!\\n    </Alert.Heading>\\n\\n    <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>\\n    <hr />\\n    <p className=\\\"mb-0\\\">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>\\n  </Alert>\\n\\n  <Alert variant=\\\"info\\\">\\n    <Alert.Heading className=\\\"d-flex align-items-center mt-2\\\">\\n      <BellIcon className=\\\"icon icon-md me-2\\\" />\\n      Heads up!\\n    </Alert.Heading>\\n\\n    <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>\\n    <hr />\\n    <p className=\\\"mb-0\\\">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>\\n  </Alert>\\n\\n  <Alert variant=\\\"warning\\\">\\n    <Alert.Heading className=\\\"d-flex align-items-center mt-2\\\">\\n      <BellIcon className=\\\"icon icon-md me-2\\\" />\\n      Warning!\\n    </Alert.Heading>\\n\\n    <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>\\n    <hr />\\n    <p className=\\\"mb-0\\\">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>\\n  </Alert>\\n\\n  <Alert variant=\\\"danger\\\">\\n    <Alert.Heading className=\\\"d-flex align-items-center mt-2\\\">\\n      <BellIcon className=\\\"icon icon-md me-2\\\" />\\n      Danger!\\n    </Alert.Heading>\\n\\n    <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>\\n    <hr />\\n    <p className=\\\"mb-0\\\">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>\\n  </Alert>\\n\\n  <Alert variant=\\\"gray-50\\\">\\n    <Alert.Heading className=\\\"d-flex align-items-center mt-2\\\">\\n      <BellIcon className=\\\"icon icon-md me-2\\\" />\\n      Light!\\n    </Alert.Heading>\\n\\n    <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>\\n    <hr />\\n    <p className=\\\"mb-0\\\">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>\\n  </Alert>\\n</React.Fragment>\"})));});","map":{"version":3,"sources":["/Users/oisinlyons/Downloads/IDENTI3 PRO/src/pages/components/Alerts.js"],"names":["React","BellIcon","SpeakerphoneIcon","Col","Row","Alert","Button","Container","Documentation"],"mappings":"AACA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,QAAT,CAAmBC,gBAAnB,KAA2C,wBAA3C,CACA,OAASC,GAAT,CAAcC,GAAd,CAAmBC,KAAnB,CAA0BC,MAA1B,CAAkCC,SAAlC,KAAmD,iBAAnD,CAEA,MAAOC,CAAAA,aAAP,KAA0B,0BAA1B,CAEA,eAAe,UAAM,CACnB,mBACE,gDACE,oBAAC,SAAD,EAAW,SAAS,CAAC,MAArB,eACE,oBAAC,GAAD,EAAK,SAAS,CAAC,yDAAf,eACE,oBAAC,GAAD,EAAK,SAAS,CAAC,sBAAf,eACE,0BAAI,SAAS,CAAC,IAAd,WADF,cAEE,yBAAG,SAAS,CAAC,MAAb,gGAFF,CADF,CADF,cAUE,oBAAC,aAAD,EACE,KAAK,CAAC,SADR,CAEE,WAAW,cACT,iDAAO,0CAAP,gJAAoK,oDAApK,qBAAqM,wDAArM,+CAHJ,CAKE,KAAK,CAAE,CAAEH,KAAK,CAALA,KAAF,CALT,CAME,OAAO,2CANT,CAOE,OAAO,8vBAPT,EAVF,cA6CE,oBAAC,aAAD,EACE,KAAK,CAAC,oBADR,CAEE,WAAW,cACT,iDAAO,0CAAP,oIAAwJ,uCAAxJ,sBAA8K,0CAA9K,iEAAkP,oDAAlP,yDAHJ,CAKE,KAAK,CAAE,CAAEA,KAAK,CAALA,KAAF,CAASC,MAAM,CAANA,MAAT,CAAiBJ,gBAAgB,CAAhBA,gBAAjB,CALT,CAME,OAAO,iHANT,CAQE,OAAO,y9HART,EA7CF,cA2KE,oBAAC,aAAD,EACE,KAAK,CAAC,2BADR,CAEE,WAAW,cACT,2DAAiB,0CAAjB,4FAHJ,CAKE,KAAK,CAAE,CAAEG,KAAK,CAALA,KAAF,CAASJ,QAAQ,CAARA,QAAT,CALT,CAME,OAAO,iGANT,CAQE,OAAO,ooFART,EA3KF,CADF,CADF,CAiPD,CAlPD","sourcesContent":["\nimport React from 'react';\nimport { BellIcon, SpeakerphoneIcon } from \"@heroicons/react/solid\";\nimport { Col, Row, Alert, Button, Container } from 'react-bootstrap';\n\nimport Documentation from \"components/Documentation\";\n\nexport default () => {\n  return (\n    <article>\n      <Container className=\"px-0\">\n        <Row className=\"d-flex flex-wrap flex-md-nowrap align-items-center py-4\">\n          <Col className=\"d-block mb-4 mb-md-0\">\n            <h1 className=\"h2\">Alerts</h1>\n            <p className=\"mb-0\">\n              Use alerts to provide contextual feedback to your users based on their input and behaviour.\n            </p>\n          </Col>\n        </Row>\n\n        <Documentation\n          title=\"Example\"\n          description={\n            <p>The <code>&#x3C;Alert&#x3E;</code> component can be used to show your users error, success, informational or warning messages. Use component properties such as  <code>variant=\"primary</code> or <code>variant=\"secondary\"</code> to use the colors from the Sass variables:</p>\n          }\n          scope={{ Alert }}\n          imports={`import { Alert } from 'react-bootstrap';`}\n          example={`<React.Fragment>\n  <Alert variant=\"primary\">\n    A simple primary alert — check it out!\n  </Alert>\n  <Alert variant=\"secondary\">\n    A simple secondary alert — check it out!\n  </Alert>\n  <Alert variant=\"success\">\n    A simple success alert — check it out!\n  </Alert>\n  <Alert variant=\"danger\">\n    A simple danger alert — check it out!\n  </Alert>\n  <Alert variant=\"warning\">\n    A simple warning alert — check it out!\n  </Alert>\n  <Alert variant=\"info\">\n    A simple info alert — check it out!\n  </Alert>\n  <Alert variant=\"gray-50\">\n    A simple light alert — check it out!\n  </Alert>\n  <Alert variant=\"gray-800\">\n    A simple dark alert — check it out!\n  </Alert>\n</React.Fragment>`}\n        />\n\n        <Documentation\n          title=\"Dismissable alerts\"\n          description={\n            <p>The <code>&#x3C;Alert&#x3E;</code> component can be used to create an alert component that can be closed by clicking on the close icon by adding the <code>show</code> and <code>onClose</code> properties. Additionally, you can also use the <code>&#x3C;FontAwesomeIcon&#x3E;</code> component to add an icon inside the alert component.</p>\n          }\n          scope={{ Alert, Button, SpeakerphoneIcon }}\n          imports={`import { Alert, Button } from 'react-bootstrap';\nimport { SpeakerphoneIcon } from \"@heroicons/react/solid\";`}\n          example={`function DismissableAlerts() {\n  const [hiddenAlerts, setHiddenAlerts] = React.useState([]);\n\n  const onClose = (alertId) => {\n    const hiddenAlertsUpdated = [...hiddenAlerts, alertId];\n    setHiddenAlerts(hiddenAlertsUpdated);\n  };\n\n  const shouldShowAlert = (alertId) => (\n    hiddenAlerts.indexOf(alertId) === -1\n  );\n\n  return(\n    <React.Fragment>\n      <Alert\n        variant=\"primary\"\n        show={shouldShowAlert(\"primary\")}\n        onClose={() => onClose(\"primary\")}>\n\n        <div className=\"d-flex justify-content-between\">\n          <div>\n            <SpeakerphoneIcon className=\"icon icon-xs me-1\" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant=\"close\" size=\"sm\" onClick={() => onClose(\"primary\")} />\n        </div>\n      </Alert>\n\n      <Alert\n        variant=\"secondary\"\n        show={shouldShowAlert(\"secondary\")}\n        onClose={() => onClose(\"secondary\")}>\n\n        <div className=\"d-flex justify-content-between\">\n          <div>\n            <SpeakerphoneIcon className=\"icon icon-xs me-1\" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant=\"close\" size=\"sm\" onClick={() => onClose(\"secondary\")} />\n        </div>\n      </Alert>\n      \n      <Alert\n        variant=\"danger\"\n        show={shouldShowAlert(\"danger\")}\n        onClose={() => onClose(\"danger\")}>\n\n        <div className=\"d-flex justify-content-between\">\n          <div>\n            <SpeakerphoneIcon className=\"icon icon-xs me-1\" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant=\"close\" size=\"sm\" onClick={() => onClose(\"danger\")} />\n        </div>\n      </Alert>\n\n      <Alert\n        variant=\"success\"\n        show={shouldShowAlert(\"success\")}\n        onClose={() => onClose(\"success\")}>\n\n        <div className=\"d-flex justify-content-between\">\n          <div>\n            <SpeakerphoneIcon className=\"icon icon-xs me-1\" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant=\"close\" size=\"sm\" onClick={() => onClose(\"success\")} />\n        </div>\n      </Alert>\n\n      <Alert\n        variant=\"warning\"\n        show={shouldShowAlert(\"warning\")}\n        onClose={() => onClose(\"warning\")}>\n\n        <div className=\"d-flex justify-content-between\">\n          <div>\n            <SpeakerphoneIcon className=\"icon icon-xs me-1\" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant=\"close\" size=\"sm\" onClick={() => onClose(\"warning\")} />\n        </div>\n      </Alert>\n\n      <Alert\n        variant=\"gray-50\"\n        show={shouldShowAlert(\"light\")}\n        onClose={() => onClose(\"light\")}>\n\n        <div className=\"d-flex justify-content-between\">\n          <div>\n            <SpeakerphoneIcon className=\"icon icon-xs me-1\" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant=\"close\" size=\"sm\" onClick={() => onClose(\"light\")} />\n        </div>\n      </Alert>\n\n      <Alert\n        variant=\"gray-800\"\n        show={shouldShowAlert(\"dark\")}\n        onClose={() => onClose(\"dark\")}>\n\n        <div className=\"d-flex justify-content-between\">\n          <div>\n            <SpeakerphoneIcon className=\"icon icon-xs me-1\" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant=\"close\" size=\"sm\" onClick={() => onClose(\"dark\")} />\n        </div>\n      </Alert>\n    </React.Fragment>\n  );\n}\n\nrender( <DismissableAlerts /> );`}\n        />\n\n        <Documentation\n          title=\"Alerts with extra content\"\n          description={\n            <p>The following <code>&#x3C;Alert&#x3E;</code> components are useful when you want to give more information and context to your users:</p>\n          }\n          scope={{ Alert, BellIcon }}\n          imports={`import { Alert } from 'react-bootstrap';\nimport { BellIcon } from \"@heroicons/react/solid\";`}\n          example={`<React.Fragment>\n  <Alert variant=\"primary\">\n    <Alert.Heading className=\"d-flex align-items-center mt-2\">\n      <BellIcon className=\"icon icon-md me-2\" />\n      Well done!\n    </Alert.Heading>\n\n    <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>\n    <hr />\n    <p className=\"mb-0\">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>\n  </Alert>\n\n  <Alert variant=\"info\">\n    <Alert.Heading className=\"d-flex align-items-center mt-2\">\n      <BellIcon className=\"icon icon-md me-2\" />\n      Heads up!\n    </Alert.Heading>\n\n    <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>\n    <hr />\n    <p className=\"mb-0\">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>\n  </Alert>\n\n  <Alert variant=\"warning\">\n    <Alert.Heading className=\"d-flex align-items-center mt-2\">\n      <BellIcon className=\"icon icon-md me-2\" />\n      Warning!\n    </Alert.Heading>\n\n    <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>\n    <hr />\n    <p className=\"mb-0\">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>\n  </Alert>\n\n  <Alert variant=\"danger\">\n    <Alert.Heading className=\"d-flex align-items-center mt-2\">\n      <BellIcon className=\"icon icon-md me-2\" />\n      Danger!\n    </Alert.Heading>\n\n    <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>\n    <hr />\n    <p className=\"mb-0\">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>\n  </Alert>\n\n  <Alert variant=\"gray-50\">\n    <Alert.Heading className=\"d-flex align-items-center mt-2\">\n      <BellIcon className=\"icon icon-md me-2\" />\n      Light!\n    </Alert.Heading>\n\n    <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>\n    <hr />\n    <p className=\"mb-0\">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>\n  </Alert>\n</React.Fragment>`}\n        />\n      </Container>\n    </article>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}