{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/oisinlyons/Downloads/volt-pro-react-v1.1.0/src/pages/components/Alerts.js\";\n\nimport React from 'react';\nimport { BellIcon, SpeakerphoneIcon } from \"@heroicons/react/solid\";\nimport { Col, Row, Alert, Button, Container } from 'react-bootstrap';\nimport Documentation from \"components/Documentation\";\nexport default (function () {\n  return /*#__PURE__*/React.createElement(\"article\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    className: \"px-0\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"d-flex flex-wrap flex-md-nowrap align-items-center py-4\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    className: \"d-block mb-4 mb-md-0\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"h2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }\n  }, \"Alerts\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mb-0\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }\n  }, \"Use alerts to provide contextual feedback to your users based on their input and behaviour.\"))), /*#__PURE__*/React.createElement(Documentation, {\n    title: \"Example\",\n    description: /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }\n    }, \"The \", /*#__PURE__*/React.createElement(\"code\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 20\n      }\n    }, \"<Alert>\"), \" component can be used to show your users error, success, informational or warning messages. Use component properties such as  \", /*#__PURE__*/React.createElement(\"code\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 177\n      }\n    }, \"variant=\\\"primary\"), \" or \", /*#__PURE__*/React.createElement(\"code\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 210\n      }\n    }, \"variant=\\\"secondary\\\"\"), \" to use the colors from the Sass variables:\"),\n    scope: {\n      Alert: Alert\n    },\n    imports: \"import { Alert } from 'react-bootstrap';\",\n    example: \"<React.Fragment>\\n  <Alert variant=\\\"primary\\\">\\n    A simple primary alert \\u2014 check it out!\\n  </Alert>\\n  <Alert variant=\\\"secondary\\\">\\n    A simple secondary alert \\u2014 check it out!\\n  </Alert>\\n  <Alert variant=\\\"success\\\">\\n    A simple success alert \\u2014 check it out!\\n  </Alert>\\n  <Alert variant=\\\"danger\\\">\\n    A simple danger alert \\u2014 check it out!\\n  </Alert>\\n  <Alert variant=\\\"warning\\\">\\n    A simple warning alert \\u2014 check it out!\\n  </Alert>\\n  <Alert variant=\\\"info\\\">\\n    A simple info alert \\u2014 check it out!\\n  </Alert>\\n  <Alert variant=\\\"gray-50\\\">\\n    A simple light alert \\u2014 check it out!\\n  </Alert>\\n  <Alert variant=\\\"gray-800\\\">\\n    A simple dark alert \\u2014 check it out!\\n  </Alert>\\n</React.Fragment>\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Documentation, {\n    title: \"Dismissable alerts\",\n    description: /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }, \"The \", /*#__PURE__*/React.createElement(\"code\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 20\n      }\n    }, \"<Alert>\"), \" component can be used to create an alert component that can be closed by clicking on the close icon by adding the \", /*#__PURE__*/React.createElement(\"code\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 165\n      }\n    }, \"show\"), \" and \", /*#__PURE__*/React.createElement(\"code\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 187\n      }\n    }, \"onClose\"), \" properties. Additionally, you can also use the \", /*#__PURE__*/React.createElement(\"code\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 255\n      }\n    }, \"<FontAwesomeIcon>\"), \" component to add an icon inside the alert component.\"),\n    scope: {\n      Alert: Alert,\n      Button: Button,\n      SpeakerphoneIcon: SpeakerphoneIcon\n    },\n    imports: \"import { Alert, Button } from 'react-bootstrap';\\nimport { SpeakerphoneIcon } from \\\"@heroicons/react/solid\\\";\",\n    example: \"function DismissableAlerts() {\\n  const [hiddenAlerts, setHiddenAlerts] = React.useState([]);\\n\\n  const onClose = (alertId) => {\\n    const hiddenAlertsUpdated = [...hiddenAlerts, alertId];\\n    setHiddenAlerts(hiddenAlertsUpdated);\\n  };\\n\\n  const shouldShowAlert = (alertId) => (\\n    hiddenAlerts.indexOf(alertId) === -1\\n  );\\n\\n  return(\\n    <React.Fragment>\\n      <Alert\\n        variant=\\\"primary\\\"\\n        show={shouldShowAlert(\\\"primary\\\")}\\n        onClose={() => onClose(\\\"primary\\\")}>\\n\\n        <div className=\\\"d-flex justify-content-between\\\">\\n          <div>\\n            <SpeakerphoneIcon className=\\\"icon icon-xs me-1\\\" />\\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\\n          </div>\\n          <Button variant=\\\"close\\\" size=\\\"sm\\\" onClick={() => onClose(\\\"primary\\\")} />\\n        </div>\\n      </Alert>\\n\\n      <Alert\\n        variant=\\\"secondary\\\"\\n        show={shouldShowAlert(\\\"secondary\\\")}\\n        onClose={() => onClose(\\\"secondary\\\")}>\\n\\n        <div className=\\\"d-flex justify-content-between\\\">\\n          <div>\\n            <SpeakerphoneIcon className=\\\"icon icon-xs me-1\\\" />\\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\\n          </div>\\n          <Button variant=\\\"close\\\" size=\\\"sm\\\" onClick={() => onClose(\\\"secondary\\\")} />\\n        </div>\\n      </Alert>\\n      \\n      <Alert\\n        variant=\\\"danger\\\"\\n        show={shouldShowAlert(\\\"danger\\\")}\\n        onClose={() => onClose(\\\"danger\\\")}>\\n\\n        <div className=\\\"d-flex justify-content-between\\\">\\n          <div>\\n            <SpeakerphoneIcon className=\\\"icon icon-xs me-1\\\" />\\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\\n          </div>\\n          <Button variant=\\\"close\\\" size=\\\"sm\\\" onClick={() => onClose(\\\"danger\\\")} />\\n        </div>\\n      </Alert>\\n\\n      <Alert\\n        variant=\\\"success\\\"\\n        show={shouldShowAlert(\\\"success\\\")}\\n        onClose={() => onClose(\\\"success\\\")}>\\n\\n        <div className=\\\"d-flex justify-content-between\\\">\\n          <div>\\n            <SpeakerphoneIcon className=\\\"icon icon-xs me-1\\\" />\\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\\n          </div>\\n          <Button variant=\\\"close\\\" size=\\\"sm\\\" onClick={() => onClose(\\\"success\\\")} />\\n        </div>\\n      </Alert>\\n\\n      <Alert\\n        variant=\\\"warning\\\"\\n        show={shouldShowAlert(\\\"warning\\\")}\\n        onClose={() => onClose(\\\"warning\\\")}>\\n\\n        <div className=\\\"d-flex justify-content-between\\\">\\n          <div>\\n            <SpeakerphoneIcon className=\\\"icon icon-xs me-1\\\" />\\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\\n          </div>\\n          <Button variant=\\\"close\\\" size=\\\"sm\\\" onClick={() => onClose(\\\"warning\\\")} />\\n        </div>\\n      </Alert>\\n\\n      <Alert\\n        variant=\\\"gray-50\\\"\\n        show={shouldShowAlert(\\\"light\\\")}\\n        onClose={() => onClose(\\\"light\\\")}>\\n\\n        <div className=\\\"d-flex justify-content-between\\\">\\n          <div>\\n            <SpeakerphoneIcon className=\\\"icon icon-xs me-1\\\" />\\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\\n          </div>\\n          <Button variant=\\\"close\\\" size=\\\"sm\\\" onClick={() => onClose(\\\"light\\\")} />\\n        </div>\\n      </Alert>\\n\\n      <Alert\\n        variant=\\\"gray-800\\\"\\n        show={shouldShowAlert(\\\"dark\\\")}\\n        onClose={() => onClose(\\\"dark\\\")}>\\n\\n        <div className=\\\"d-flex justify-content-between\\\">\\n          <div>\\n            <SpeakerphoneIcon className=\\\"icon icon-xs me-1\\\" />\\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\\n          </div>\\n          <Button variant=\\\"close\\\" size=\\\"sm\\\" onClick={() => onClose(\\\"dark\\\")} />\\n        </div>\\n      </Alert>\\n    </React.Fragment>\\n  );\\n}\\n\\nrender( <DismissableAlerts /> );\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Documentation, {\n    title: \"Alerts with extra content\",\n    description: /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 13\n      }\n    }, \"The following \", /*#__PURE__*/React.createElement(\"code\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 30\n      }\n    }, \"<Alert>\"), \" components are useful when you want to give more information and context to your users:\"),\n    scope: {\n      Alert: Alert,\n      BellIcon: BellIcon\n    },\n    imports: \"import { Alert } from 'react-bootstrap';\\nimport { BellIcon } from \\\"@heroicons/react/solid\\\";\",\n    example: \"<React.Fragment>\\n  <Alert variant=\\\"primary\\\">\\n    <Alert.Heading className=\\\"d-flex align-items-center mt-2\\\">\\n      <BellIcon className=\\\"icon icon-md me-2\\\" />\\n      Well done!\\n    </Alert.Heading>\\n\\n    <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>\\n    <hr />\\n    <p className=\\\"mb-0\\\">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>\\n  </Alert>\\n\\n  <Alert variant=\\\"info\\\">\\n    <Alert.Heading className=\\\"d-flex align-items-center mt-2\\\">\\n      <BellIcon className=\\\"icon icon-md me-2\\\" />\\n      Heads up!\\n    </Alert.Heading>\\n\\n    <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>\\n    <hr />\\n    <p className=\\\"mb-0\\\">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>\\n  </Alert>\\n\\n  <Alert variant=\\\"warning\\\">\\n    <Alert.Heading className=\\\"d-flex align-items-center mt-2\\\">\\n      <BellIcon className=\\\"icon icon-md me-2\\\" />\\n      Warning!\\n    </Alert.Heading>\\n\\n    <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>\\n    <hr />\\n    <p className=\\\"mb-0\\\">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>\\n  </Alert>\\n\\n  <Alert variant=\\\"danger\\\">\\n    <Alert.Heading className=\\\"d-flex align-items-center mt-2\\\">\\n      <BellIcon className=\\\"icon icon-md me-2\\\" />\\n      Danger!\\n    </Alert.Heading>\\n\\n    <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>\\n    <hr />\\n    <p className=\\\"mb-0\\\">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>\\n  </Alert>\\n\\n  <Alert variant=\\\"gray-50\\\">\\n    <Alert.Heading className=\\\"d-flex align-items-center mt-2\\\">\\n      <BellIcon className=\\\"icon icon-md me-2\\\" />\\n      Light!\\n    </Alert.Heading>\\n\\n    <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>\\n    <hr />\\n    <p className=\\\"mb-0\\\">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>\\n  </Alert>\\n</React.Fragment>\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }\n  })));\n});","map":{"version":3,"sources":["/Users/oisinlyons/Downloads/volt-pro-react-v1.1.0/src/pages/components/Alerts.js"],"names":["React","BellIcon","SpeakerphoneIcon","Col","Row","Alert","Button","Container","Documentation"],"mappings":";;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,gBAAnB,QAA2C,wBAA3C;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,KAAnB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,iBAAnD;AAEA,OAAOC,aAAP,MAA0B,0BAA1B;AAEA,gBAAe,YAAM;AACnB,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAC,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAK,IAAA,SAAS,EAAC,yDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAG,IAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mGAFF,CADF,CADF,eAUE,oBAAC,aAAD;AACE,IAAA,KAAK,EAAC,SADR;AAEE,IAAA,WAAW,eACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAP,kJAAoK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAApK,uBAAqM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAArM,gDAHJ;AAKE,IAAA,KAAK,EAAE;AAAEH,MAAAA,KAAK,EAALA;AAAF,KALT;AAME,IAAA,OAAO,4CANT;AAOE,IAAA,OAAO,+vBAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,eA6CE,oBAAC,aAAD;AACE,IAAA,KAAK,EAAC,oBADR;AAEE,IAAA,WAAW,eACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAP,sIAAwJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAxJ,wBAA8K;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAA9K,mEAAkP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAlP,0DAHJ;AAKE,IAAA,KAAK,EAAE;AAAEA,MAAAA,KAAK,EAALA,KAAF;AAASC,MAAAA,MAAM,EAANA,MAAT;AAAiBJ,MAAAA,gBAAgB,EAAhBA;AAAjB,KALT;AAME,IAAA,OAAO,kHANT;AAQE,IAAA,OAAO,09HART;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA7CF,eA2KE,oBAAC,aAAD;AACE,IAAA,KAAK,EAAC,2BADR;AAEE,IAAA,WAAW,eACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAjB,6FAHJ;AAKE,IAAA,KAAK,EAAE;AAAEG,MAAAA,KAAK,EAALA,KAAF;AAASJ,MAAAA,QAAQ,EAARA;AAAT,KALT;AAME,IAAA,OAAO,kGANT;AAQE,IAAA,OAAO,qoFART;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA3KF,CADF,CADF;AAiPD,CAlPD","sourcesContent":["\nimport React from 'react';\nimport { BellIcon, SpeakerphoneIcon } from \"@heroicons/react/solid\";\nimport { Col, Row, Alert, Button, Container } from 'react-bootstrap';\n\nimport Documentation from \"components/Documentation\";\n\nexport default () => {\n  return (\n    <article>\n      <Container className=\"px-0\">\n        <Row className=\"d-flex flex-wrap flex-md-nowrap align-items-center py-4\">\n          <Col className=\"d-block mb-4 mb-md-0\">\n            <h1 className=\"h2\">Alerts</h1>\n            <p className=\"mb-0\">\n              Use alerts to provide contextual feedback to your users based on their input and behaviour.\n            </p>\n          </Col>\n        </Row>\n\n        <Documentation\n          title=\"Example\"\n          description={\n            <p>The <code>&#x3C;Alert&#x3E;</code> component can be used to show your users error, success, informational or warning messages. Use component properties such as  <code>variant=\"primary</code> or <code>variant=\"secondary\"</code> to use the colors from the Sass variables:</p>\n          }\n          scope={{ Alert }}\n          imports={`import { Alert } from 'react-bootstrap';`}\n          example={`<React.Fragment>\n  <Alert variant=\"primary\">\n    A simple primary alert — check it out!\n  </Alert>\n  <Alert variant=\"secondary\">\n    A simple secondary alert — check it out!\n  </Alert>\n  <Alert variant=\"success\">\n    A simple success alert — check it out!\n  </Alert>\n  <Alert variant=\"danger\">\n    A simple danger alert — check it out!\n  </Alert>\n  <Alert variant=\"warning\">\n    A simple warning alert — check it out!\n  </Alert>\n  <Alert variant=\"info\">\n    A simple info alert — check it out!\n  </Alert>\n  <Alert variant=\"gray-50\">\n    A simple light alert — check it out!\n  </Alert>\n  <Alert variant=\"gray-800\">\n    A simple dark alert — check it out!\n  </Alert>\n</React.Fragment>`}\n        />\n\n        <Documentation\n          title=\"Dismissable alerts\"\n          description={\n            <p>The <code>&#x3C;Alert&#x3E;</code> component can be used to create an alert component that can be closed by clicking on the close icon by adding the <code>show</code> and <code>onClose</code> properties. Additionally, you can also use the <code>&#x3C;FontAwesomeIcon&#x3E;</code> component to add an icon inside the alert component.</p>\n          }\n          scope={{ Alert, Button, SpeakerphoneIcon }}\n          imports={`import { Alert, Button } from 'react-bootstrap';\nimport { SpeakerphoneIcon } from \"@heroicons/react/solid\";`}\n          example={`function DismissableAlerts() {\n  const [hiddenAlerts, setHiddenAlerts] = React.useState([]);\n\n  const onClose = (alertId) => {\n    const hiddenAlertsUpdated = [...hiddenAlerts, alertId];\n    setHiddenAlerts(hiddenAlertsUpdated);\n  };\n\n  const shouldShowAlert = (alertId) => (\n    hiddenAlerts.indexOf(alertId) === -1\n  );\n\n  return(\n    <React.Fragment>\n      <Alert\n        variant=\"primary\"\n        show={shouldShowAlert(\"primary\")}\n        onClose={() => onClose(\"primary\")}>\n\n        <div className=\"d-flex justify-content-between\">\n          <div>\n            <SpeakerphoneIcon className=\"icon icon-xs me-1\" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant=\"close\" size=\"sm\" onClick={() => onClose(\"primary\")} />\n        </div>\n      </Alert>\n\n      <Alert\n        variant=\"secondary\"\n        show={shouldShowAlert(\"secondary\")}\n        onClose={() => onClose(\"secondary\")}>\n\n        <div className=\"d-flex justify-content-between\">\n          <div>\n            <SpeakerphoneIcon className=\"icon icon-xs me-1\" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant=\"close\" size=\"sm\" onClick={() => onClose(\"secondary\")} />\n        </div>\n      </Alert>\n      \n      <Alert\n        variant=\"danger\"\n        show={shouldShowAlert(\"danger\")}\n        onClose={() => onClose(\"danger\")}>\n\n        <div className=\"d-flex justify-content-between\">\n          <div>\n            <SpeakerphoneIcon className=\"icon icon-xs me-1\" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant=\"close\" size=\"sm\" onClick={() => onClose(\"danger\")} />\n        </div>\n      </Alert>\n\n      <Alert\n        variant=\"success\"\n        show={shouldShowAlert(\"success\")}\n        onClose={() => onClose(\"success\")}>\n\n        <div className=\"d-flex justify-content-between\">\n          <div>\n            <SpeakerphoneIcon className=\"icon icon-xs me-1\" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant=\"close\" size=\"sm\" onClick={() => onClose(\"success\")} />\n        </div>\n      </Alert>\n\n      <Alert\n        variant=\"warning\"\n        show={shouldShowAlert(\"warning\")}\n        onClose={() => onClose(\"warning\")}>\n\n        <div className=\"d-flex justify-content-between\">\n          <div>\n            <SpeakerphoneIcon className=\"icon icon-xs me-1\" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant=\"close\" size=\"sm\" onClick={() => onClose(\"warning\")} />\n        </div>\n      </Alert>\n\n      <Alert\n        variant=\"gray-50\"\n        show={shouldShowAlert(\"light\")}\n        onClose={() => onClose(\"light\")}>\n\n        <div className=\"d-flex justify-content-between\">\n          <div>\n            <SpeakerphoneIcon className=\"icon icon-xs me-1\" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant=\"close\" size=\"sm\" onClick={() => onClose(\"light\")} />\n        </div>\n      </Alert>\n\n      <Alert\n        variant=\"gray-800\"\n        show={shouldShowAlert(\"dark\")}\n        onClose={() => onClose(\"dark\")}>\n\n        <div className=\"d-flex justify-content-between\">\n          <div>\n            <SpeakerphoneIcon className=\"icon icon-xs me-1\" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant=\"close\" size=\"sm\" onClick={() => onClose(\"dark\")} />\n        </div>\n      </Alert>\n    </React.Fragment>\n  );\n}\n\nrender( <DismissableAlerts /> );`}\n        />\n\n        <Documentation\n          title=\"Alerts with extra content\"\n          description={\n            <p>The following <code>&#x3C;Alert&#x3E;</code> components are useful when you want to give more information and context to your users:</p>\n          }\n          scope={{ Alert, BellIcon }}\n          imports={`import { Alert } from 'react-bootstrap';\nimport { BellIcon } from \"@heroicons/react/solid\";`}\n          example={`<React.Fragment>\n  <Alert variant=\"primary\">\n    <Alert.Heading className=\"d-flex align-items-center mt-2\">\n      <BellIcon className=\"icon icon-md me-2\" />\n      Well done!\n    </Alert.Heading>\n\n    <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>\n    <hr />\n    <p className=\"mb-0\">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>\n  </Alert>\n\n  <Alert variant=\"info\">\n    <Alert.Heading className=\"d-flex align-items-center mt-2\">\n      <BellIcon className=\"icon icon-md me-2\" />\n      Heads up!\n    </Alert.Heading>\n\n    <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>\n    <hr />\n    <p className=\"mb-0\">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>\n  </Alert>\n\n  <Alert variant=\"warning\">\n    <Alert.Heading className=\"d-flex align-items-center mt-2\">\n      <BellIcon className=\"icon icon-md me-2\" />\n      Warning!\n    </Alert.Heading>\n\n    <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>\n    <hr />\n    <p className=\"mb-0\">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>\n  </Alert>\n\n  <Alert variant=\"danger\">\n    <Alert.Heading className=\"d-flex align-items-center mt-2\">\n      <BellIcon className=\"icon icon-md me-2\" />\n      Danger!\n    </Alert.Heading>\n\n    <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>\n    <hr />\n    <p className=\"mb-0\">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>\n  </Alert>\n\n  <Alert variant=\"gray-50\">\n    <Alert.Heading className=\"d-flex align-items-center mt-2\">\n      <BellIcon className=\"icon icon-md me-2\" />\n      Light!\n    </Alert.Heading>\n\n    <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>\n    <hr />\n    <p className=\"mb-0\">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>\n  </Alert>\n</React.Fragment>`}\n        />\n      </Container>\n    </article>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}