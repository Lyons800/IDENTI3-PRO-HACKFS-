{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/oisinlyons/Downloads/IDENTI3 PRO/src/pages/plugins/Calendar.js\";\n\nimport React from 'react';\nimport Swal from \"sweetalert2\";\nimport moment from \"moment-timezone\";\nimport { Col, Row, Form, Card, Modal, Button, InputGroup, Container } from 'react-bootstrap';\nimport Datetime from \"react-datetime\";\nimport { CalendarIcon } from \"@heroicons/react/solid\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport bootstrapPlugin from \"@fullcalendar/bootstrap\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport withReactContent from \"sweetalert2-react-content\";\nimport Code from \"components/Code\";\nimport Documentation from \"components/Documentation\";\nimport entries from \"data/events\";\nexport default (function () {\n  return /*#__PURE__*/React.createElement(Container, {\n    className: \"px-0\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: 12,\n    className: \"p-3\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Card.Body, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"h2\",\n    id: \"calendar\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 15\n    }\n  }, \"Calendar\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"fs-5 fw-light\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 15\n    }\n  }, \"Volt React has an advanced integration of \", /*#__PURE__*/React.createElement(Card.Link, {\n    href: \"https://fullcalendar.io/docs/react\",\n    target: \"_blank\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 59\n    }\n  }, \"FullCalendar\"), \" to show, edit and delete events.\"), /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"fs-5\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 15\n    }\n  }, \"Getting started\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 15\n    }\n  }, \"The first step is to install the FullCalendar related dependencies. You\\u2019ll need the React adapter and any additional plugins you plan to use (the full list can be found \", /*#__PURE__*/React.createElement(Card.Link, {\n    href: \"https://fullcalendar.io/docs/plugin-index\",\n    target: \"_blank\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 186\n    }\n  }, \"here\"), \"):\"), /*#__PURE__*/React.createElement(Code, {\n    code: \"$ npm install --save @fullcalendar/react @fullcalendar/daygrid @fullcalendar/timegrid @fullcalendar/bootstrap @fullcalendar/interaction\",\n    language: \"bash\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Documentation, {\n    title: \"Example\",\n    description: /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 19\n      }\n    }, \"Here\\u2019s an example of a calendar that combines two great libraries FullCalendar and SweetAlert:\"),\n    imports: \"import { Col, Row, Form, Modal, Button, InputGroup } from \\\"react-bootstrap\\\";\\nimport Datetime from \\\"react-datetime\\\";\\nimport { CalendarIcon } from \\\"@heroicons/react/solid\\\";\\nimport FullCalendar from \\\"@fullcalendar/react\\\";\\nimport dayGridPlugin from \\\"@fullcalendar/daygrid\\\";\\nimport timeGridPlugin from \\\"@fullcalendar/timegrid\\\";\\nimport bootstrapPlugin from \\\"@fullcalendar/bootstrap\\\";\\nimport interactionPlugin from \\\"@fullcalendar/interaction\\\";\\nimport withReactContent from \\\"sweetalert2-react-content\\\";\",\n    scope: {\n      Col: Col,\n      Row: Row,\n      Form: Form,\n      Modal: Modal,\n      Button: Button,\n      InputGroup: InputGroup,\n      entries: entries,\n      Date: Date,\n      moment: moment,\n      FullCalendar: FullCalendar,\n      dayGridPlugin: dayGridPlugin,\n      timeGridPlugin: timeGridPlugin,\n      bootstrapPlugin: bootstrapPlugin,\n      interactionPlugin: interactionPlugin,\n      Datetime: Datetime,\n      Swal: Swal,\n      withReactContent: withReactContent,\n      CalendarIcon: CalendarIcon\n    },\n    example: \"const SwalWithBootstrapButtons = withReactContent(Swal.mixin({\\n  customClass: {\\n    confirmButton: 'btn btn-primary me-3',\\n    cancelButton: 'btn btn-gray'\\n  },\\n  buttonsStyling: false\\n}));\\n                \\nconst EventModal = (props) => {\\n  const [title, setTitle] = React.useState(props.title);\\n  const [start, setStart] = React.useState(props.start);\\n  const [end, setEnd] = React.useState(props.end);\\n\\n  const { show = false, edit = false, id } = props;\\n  const startDate = start ? moment(start).format(\\\"YYYY-MM-DD\\\") : moment().format(\\\"YYYY-MM-DD\\\");\\n  const endDate = end ? moment(end).endOf(\\\"day\\\").format(\\\"YYYY-MM-DD\\\") : moment().format(\\\"YYYY-MM-DD\\\");\\n\\n  const onTitleChange = (e) => setTitle(e.target.value);\\n\\n  const onConfirm = () => {\\n    const finalStart = moment(startDate).toDate();\\n    const finalEnd = moment(endDate).toDate();\\n    const payload = { id, title, start: finalStart, end: finalEnd };\\n\\n    if (edit) {\\n      return props.onUpdate && props.onUpdate(payload);\\n    }\\n\\n    return props.onAdd && props.onAdd(payload);\\n  }\\n  const onDelete = () => edit && props.onDelete && props.onDelete(id);\\n  const onHide = () => props.onHide && props.onHide();\\n\\n  return (\\n    <Modal as={Modal.Dialog} centered show={show} onHide={onHide}>\\n      <Form className=\\\"modal-content\\\">\\n        <Modal.Body>\\n          <Form.Group id=\\\"title\\\" className=\\\"mb-4\\\">\\n            <Form.Label>Event title</Form.Label>\\n            <Form.Control\\n              required\\n              autoFocus\\n              type=\\\"text\\\"\\n              value={title}\\n              onChange={onTitleChange} />\\n          </Form.Group>\\n          <Row>\\n            <Col xs={12} lg={6}>\\n              <Form.Group id=\\\"startDate\\\">\\n                <Form.Label>Select start date</Form.Label>\\n                <Datetime\\n                  timeFormat={false}\\n                  onChange={setStart}\\n                  renderInput={(props, openCalendar) => (\\n                    <InputGroup>\\n                      <InputGroup.Text>\\n                        <CalendarIcon className=\\\"icon icon-xs\\\" />\\n                      </InputGroup.Text>\\n                      <Form.Control\\n                        required\\n                        type=\\\"text\\\"\\n                        placeholder=\\\"YYYY-MM-DD\\\"\\n                        value={startDate}\\n                        onFocus={openCalendar}\\n                        onChange={() => { }} />\\n                    </InputGroup>\\n                  )} />\\n              </Form.Group>\\n            </Col>\\n            <Col xs={12} lg={6}>\\n              <Form.Group id=\\\"endDate\\\" className=\\\"mb-2\\\">\\n                <Form.Label>Select end date</Form.Label>\\n                <Datetime\\n                  timeFormat={false}\\n                  onChange={setEnd}\\n                  isValidDate={currDate => currDate.isAfter(start)}\\n                  renderInput={(props, openCalendar) => (\\n                    <InputGroup>\\n                      <InputGroup.Text>\\n                        <FontAwesomeIcon icon={faCalendarAlt} />\\n                      </InputGroup.Text>\\n                      <Form.Control\\n                        required\\n                        type=\\\"text\\\"\\n                        placeholder=\\\"YYYY-MM-DD\\\"\\n                        value={endDate}\\n                        onFocus={openCalendar}\\n                        onChange={() => { }} />\\n                    </InputGroup>\\n                  )} />\\n              </Form.Group>\\n            </Col>\\n          </Row>\\n        </Modal.Body>\\n        <Modal.Footer>\\n          <Button variant=\\\"primary\\\" className=\\\"me-2\\\" onClick={onConfirm}>\\n            {edit ? \\\"Update event\\\" : \\\"Add new event\\\"}\\n          </Button>\\n\\n          {edit ? (\\n            <Button variant=\\\"danger\\\" onClick={onDelete}>\\n              Delete event\\n            </Button>\\n          ) : null}\\n\\n          <Button variant=\\\"link\\\" className=\\\"text-gray ms-auto\\\" onClick={onHide}>\\n            Close\\n          </Button>\\n        </Modal.Footer>\\n      </Form>\\n    </Modal>\\n  );\\n};\\n                \\nconst Calendar = () => {\\n  const defaultModalProps = { id: \\\"\\\", title: \\\"\\\", start: null, end: null };\\n  const [showEditModal, setShowEditModal] = React.useState(false);\\n  const [showAddModal, setShowAddModal] = React.useState(false);\\n  const [modalProps, setModalProps] = React.useState(defaultModalProps);\\n  const [events, setEvents] = React.useState(entries);\\n\\n  const calendarRef = React.useRef();\\n  const currentDate = moment().format(\\\"YYYY-MM-DD\\\");\\n\\n  const onDateClick = (props) => {\\n    const { date } = props;\\n    const id = events.length + 1;\\n    const endDate = new Date(date).setDate(date.getDate() + 1);\\n\\n    setModalProps({ ...modalProps, id, start: date, end: endDate });\\n    setShowAddModal(true);\\n  };\\n\\n  const onEventClick = (props) => {\\n    const { event: { id, title, start, end } } = props;\\n    setModalProps({ id, title, start, end });\\n    setShowEditModal(true);\\n  };\\n\\n  const onEventUpdate = (props) => {\\n    const { id, title, start, end } = props;\\n    const calendarApi = calendarRef.current.getApi();\\n    const calendarElem = calendarApi.getEventById(id);\\n\\n    if (calendarElem) {\\n      calendarElem.setProp(\\\"title\\\", title);\\n      calendarElem.setStart(start);\\n      calendarElem.setEnd(end);\\n    }\\n\\n    setShowEditModal(false);\\n  };\\n\\n  const onEventAdd = (props) => {\\n    const newEvent = { ...props, dragable: true, className: 'bg-blue text-white', allDay: true };\\n\\n    setShowAddModal(false);\\n    setEvents([...events, newEvent]);\\n    setModalProps(defaultModalProps);\\n  };\\n\\n  const onEventDelete = async function(id) {\\n    const result = await SwalWithBootstrapButtons.fire({\\n      icon: 'error',\\n      title: 'Confirm deletion',\\n      text: 'Are you sure you want to delete this event?',\\n      showCancelButton: true,\\n      confirmButtonText: \\\"Yes\\\",\\n      cancelButtonText: 'Cancel'\\n    });\\n\\n    setShowEditModal(false);\\n    setModalProps(defaultModalProps);\\n\\n    if (result.isConfirmed) {\\n      await SwalWithBootstrapButtons.fire('Deleted!', 'The event has been deleted.', 'success');\\n\\n      const newEvents = events.filter(e => e.id !== id);\\n      setEvents(newEvents);\\n    }\\n  };\\n\\n  const handleClose = () => {\\n    setShowAddModal(false);\\n    setShowEditModal(false);\\n  };\\n\\n  return <>\\n    {showEditModal ? (\\n      <EventModal\\n        {...modalProps}\\n        edit={true}\\n        show={showEditModal}\\n        onUpdate={onEventUpdate}\\n        onDelete={onEventDelete}\\n        onHide={handleClose}\\n      />\\n    ) : null}\\n\\n    {showAddModal ? (\\n      <EventModal\\n        {...modalProps}\\n        show={showAddModal}\\n        onAdd={onEventAdd}\\n        onHide={handleClose}\\n      />\\n    ) : null}\\n\\n    <FullCalendar\\n      editable\\n      selectable\\n      events={events}\\n      ref={calendarRef}\\n      themeSystem=\\\"bootstrap\\\"\\n      initialView=\\\"dayGridMonth\\\"\\n      displayEventTime={false}\\n      initialDate={currentDate}\\n      dateClick={onDateClick}\\n      eventClick={onEventClick}\\n      plugins={[dayGridPlugin, timeGridPlugin, bootstrapPlugin, interactionPlugin]}\\n      buttonText={{\\n        prev: \\\"Previous\\\",\\n        next: \\\"Next\\\",\\n        month: \\\"Month\\\",\\n        week: \\\"Week\\\",\\n        day: \\\"Day\\\",\\n        today: \\\"Today\\\",\\n      }}\\n    />\\n  </>;\\n};\\n\\nrender( <Calendar /> );\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 15\n    }\n  }))))));\n});","map":{"version":3,"sources":["/Users/oisinlyons/Downloads/IDENTI3 PRO/src/pages/plugins/Calendar.js"],"names":["React","Swal","moment","Col","Row","Form","Card","Modal","Button","InputGroup","Container","Datetime","CalendarIcon","FullCalendar","dayGridPlugin","timeGridPlugin","bootstrapPlugin","interactionPlugin","withReactContent","Code","Documentation","entries","Date"],"mappings":"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","sourcesContent":["\nimport React from 'react';\nimport Swal from \"sweetalert2\";\nimport moment from \"moment-timezone\";\nimport { Col, Row, Form, Card, Modal, Button, InputGroup, Container } from 'react-bootstrap';\nimport Datetime from \"react-datetime\";\nimport { CalendarIcon } from \"@heroicons/react/solid\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport bootstrapPlugin from \"@fullcalendar/bootstrap\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport withReactContent from \"sweetalert2-react-content\";\n\nimport Code from \"components/Code\";\nimport Documentation from \"components/Documentation\";\nimport entries from \"data/events\";\n\n\nexport default () => {\n\n  return (\n    <Container className=\"px-0\">\n      <Row>\n        <Col xs={12} className=\"p-3\">\n          <Card>\n            <Card.Body>\n              <h1 className=\"h2\" id=\"calendar\">Calendar</h1>\n              <p className=\"fs-5 fw-light\">\n                Volt React has an advanced integration of <Card.Link href=\"https://fullcalendar.io/docs/react\" target=\"_blank\">FullCalendar</Card.Link> to show, edit and delete events.\n              </p>\n\n              <h2 className=\"fs-5\">Getting started</h2>\n              <p>\n                The first step is to install the FullCalendar related dependencies. You’ll need the React adapter and any additional plugins you plan to use (the full list can be found <Card.Link href=\"https://fullcalendar.io/docs/plugin-index\" target=\"_blank\">here</Card.Link>):\n              </p>\n              <Code code=\"$ npm install --save @fullcalendar/react @fullcalendar/daygrid @fullcalendar/timegrid @fullcalendar/bootstrap @fullcalendar/interaction\" language=\"bash\" />\n\n              <Documentation\n                title=\"Example\"\n                description={\n                  <p>Here’s an example of a calendar that combines two great libraries FullCalendar and SweetAlert:</p>\n                }\n                imports={`import { Col, Row, Form, Modal, Button, InputGroup } from \"react-bootstrap\";\nimport Datetime from \"react-datetime\";\nimport { CalendarIcon } from \"@heroicons/react/solid\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport bootstrapPlugin from \"@fullcalendar/bootstrap\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport withReactContent from \"sweetalert2-react-content\";`}\n                scope={{ Col, Row, Form, Modal, Button, InputGroup, entries, Date, moment, FullCalendar, dayGridPlugin, timeGridPlugin, bootstrapPlugin, interactionPlugin, Datetime, Swal, withReactContent, CalendarIcon }}\n                example={`const SwalWithBootstrapButtons = withReactContent(Swal.mixin({\n  customClass: {\n    confirmButton: 'btn btn-primary me-3',\n    cancelButton: 'btn btn-gray'\n  },\n  buttonsStyling: false\n}));\n                \nconst EventModal = (props) => {\n  const [title, setTitle] = React.useState(props.title);\n  const [start, setStart] = React.useState(props.start);\n  const [end, setEnd] = React.useState(props.end);\n\n  const { show = false, edit = false, id } = props;\n  const startDate = start ? moment(start).format(\"YYYY-MM-DD\") : moment().format(\"YYYY-MM-DD\");\n  const endDate = end ? moment(end).endOf(\"day\").format(\"YYYY-MM-DD\") : moment().format(\"YYYY-MM-DD\");\n\n  const onTitleChange = (e) => setTitle(e.target.value);\n\n  const onConfirm = () => {\n    const finalStart = moment(startDate).toDate();\n    const finalEnd = moment(endDate).toDate();\n    const payload = { id, title, start: finalStart, end: finalEnd };\n\n    if (edit) {\n      return props.onUpdate && props.onUpdate(payload);\n    }\n\n    return props.onAdd && props.onAdd(payload);\n  }\n  const onDelete = () => edit && props.onDelete && props.onDelete(id);\n  const onHide = () => props.onHide && props.onHide();\n\n  return (\n    <Modal as={Modal.Dialog} centered show={show} onHide={onHide}>\n      <Form className=\"modal-content\">\n        <Modal.Body>\n          <Form.Group id=\"title\" className=\"mb-4\">\n            <Form.Label>Event title</Form.Label>\n            <Form.Control\n              required\n              autoFocus\n              type=\"text\"\n              value={title}\n              onChange={onTitleChange} />\n          </Form.Group>\n          <Row>\n            <Col xs={12} lg={6}>\n              <Form.Group id=\"startDate\">\n                <Form.Label>Select start date</Form.Label>\n                <Datetime\n                  timeFormat={false}\n                  onChange={setStart}\n                  renderInput={(props, openCalendar) => (\n                    <InputGroup>\n                      <InputGroup.Text>\n                        <CalendarIcon className=\"icon icon-xs\" />\n                      </InputGroup.Text>\n                      <Form.Control\n                        required\n                        type=\"text\"\n                        placeholder=\"YYYY-MM-DD\"\n                        value={startDate}\n                        onFocus={openCalendar}\n                        onChange={() => { }} />\n                    </InputGroup>\n                  )} />\n              </Form.Group>\n            </Col>\n            <Col xs={12} lg={6}>\n              <Form.Group id=\"endDate\" className=\"mb-2\">\n                <Form.Label>Select end date</Form.Label>\n                <Datetime\n                  timeFormat={false}\n                  onChange={setEnd}\n                  isValidDate={currDate => currDate.isAfter(start)}\n                  renderInput={(props, openCalendar) => (\n                    <InputGroup>\n                      <InputGroup.Text>\n                        <FontAwesomeIcon icon={faCalendarAlt} />\n                      </InputGroup.Text>\n                      <Form.Control\n                        required\n                        type=\"text\"\n                        placeholder=\"YYYY-MM-DD\"\n                        value={endDate}\n                        onFocus={openCalendar}\n                        onChange={() => { }} />\n                    </InputGroup>\n                  )} />\n              </Form.Group>\n            </Col>\n          </Row>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" className=\"me-2\" onClick={onConfirm}>\n            {edit ? \"Update event\" : \"Add new event\"}\n          </Button>\n\n          {edit ? (\n            <Button variant=\"danger\" onClick={onDelete}>\n              Delete event\n            </Button>\n          ) : null}\n\n          <Button variant=\"link\" className=\"text-gray ms-auto\" onClick={onHide}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Form>\n    </Modal>\n  );\n};\n                \nconst Calendar = () => {\n  const defaultModalProps = { id: \"\", title: \"\", start: null, end: null };\n  const [showEditModal, setShowEditModal] = React.useState(false);\n  const [showAddModal, setShowAddModal] = React.useState(false);\n  const [modalProps, setModalProps] = React.useState(defaultModalProps);\n  const [events, setEvents] = React.useState(entries);\n\n  const calendarRef = React.useRef();\n  const currentDate = moment().format(\"YYYY-MM-DD\");\n\n  const onDateClick = (props) => {\n    const { date } = props;\n    const id = events.length + 1;\n    const endDate = new Date(date).setDate(date.getDate() + 1);\n\n    setModalProps({ ...modalProps, id, start: date, end: endDate });\n    setShowAddModal(true);\n  };\n\n  const onEventClick = (props) => {\n    const { event: { id, title, start, end } } = props;\n    setModalProps({ id, title, start, end });\n    setShowEditModal(true);\n  };\n\n  const onEventUpdate = (props) => {\n    const { id, title, start, end } = props;\n    const calendarApi = calendarRef.current.getApi();\n    const calendarElem = calendarApi.getEventById(id);\n\n    if (calendarElem) {\n      calendarElem.setProp(\"title\", title);\n      calendarElem.setStart(start);\n      calendarElem.setEnd(end);\n    }\n\n    setShowEditModal(false);\n  };\n\n  const onEventAdd = (props) => {\n    const newEvent = { ...props, dragable: true, className: 'bg-blue text-white', allDay: true };\n\n    setShowAddModal(false);\n    setEvents([...events, newEvent]);\n    setModalProps(defaultModalProps);\n  };\n\n  const onEventDelete = async function(id) {\n    const result = await SwalWithBootstrapButtons.fire({\n      icon: 'error',\n      title: 'Confirm deletion',\n      text: 'Are you sure you want to delete this event?',\n      showCancelButton: true,\n      confirmButtonText: \"Yes\",\n      cancelButtonText: 'Cancel'\n    });\n\n    setShowEditModal(false);\n    setModalProps(defaultModalProps);\n\n    if (result.isConfirmed) {\n      await SwalWithBootstrapButtons.fire('Deleted!', 'The event has been deleted.', 'success');\n\n      const newEvents = events.filter(e => e.id !== id);\n      setEvents(newEvents);\n    }\n  };\n\n  const handleClose = () => {\n    setShowAddModal(false);\n    setShowEditModal(false);\n  };\n\n  return <>\n    {showEditModal ? (\n      <EventModal\n        {...modalProps}\n        edit={true}\n        show={showEditModal}\n        onUpdate={onEventUpdate}\n        onDelete={onEventDelete}\n        onHide={handleClose}\n      />\n    ) : null}\n\n    {showAddModal ? (\n      <EventModal\n        {...modalProps}\n        show={showAddModal}\n        onAdd={onEventAdd}\n        onHide={handleClose}\n      />\n    ) : null}\n\n    <FullCalendar\n      editable\n      selectable\n      events={events}\n      ref={calendarRef}\n      themeSystem=\"bootstrap\"\n      initialView=\"dayGridMonth\"\n      displayEventTime={false}\n      initialDate={currentDate}\n      dateClick={onDateClick}\n      eventClick={onEventClick}\n      plugins={[dayGridPlugin, timeGridPlugin, bootstrapPlugin, interactionPlugin]}\n      buttonText={{\n        prev: \"Previous\",\n        next: \"Next\",\n        month: \"Month\",\n        week: \"Week\",\n        day: \"Day\",\n        today: \"Today\",\n      }}\n    />\n  </>;\n};\n\nrender( <Calendar /> );`}\n              />\n\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}