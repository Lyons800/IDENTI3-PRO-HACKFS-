{"ast":null,"code":"import _slicedToArray from \"/Users/oisinlyons/Downloads/volt-pro-react-v1.1.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/oisinlyons/Downloads/volt-pro-react-v1.1.0/src/components/Code.js\";\n\nimport React, { useState } from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { Card, Button, Tooltip, OverlayTrigger } from 'react-bootstrap';\nimport Highlight, { Prism } from 'prism-react-renderer';\nimport themeStyle from \"assets/syntax-themes/ghcolors.json\";\nexport default (function (props) {\n  var _props$code = props.code,\n      code = _props$code === void 0 ? \"\" : _props$code,\n      _props$language = props.language,\n      language = _props$language === void 0 ? \"jsx\" : _props$language;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      copied = _useState2[0],\n      setCopied = _useState2[1];\n\n  var handleCopy = function handleCopy() {\n    setCopied(true);\n    setTimeout(function () {\n      return setCopied(false);\n    }, 1500);\n  };\n\n  var CodeStyling = function CodeStyling(_ref) {\n    var className = _ref.className,\n        style = _ref.style,\n        tokens = _ref.tokens,\n        getLineProps = _ref.getLineProps,\n        getTokenProps = _ref.getTokenProps;\n    return /*#__PURE__*/React.createElement(Card, {\n      className: \"position-relative pe-8 mb-2\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"pre\", {\n      className: \"\".concat(className, \" mb-0\"),\n      style: style,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }\n    }, tokens.map(function (line, i) {\n      return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getLineProps({\n        line: line,\n        key: i\n      }), {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 13\n        }\n      }), line.map(function (token, key) {\n        return /*#__PURE__*/React.createElement(\"span\", Object.assign({}, getTokenProps({\n          token: token,\n          key: key\n        }), {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 41\n          }\n        }));\n      }));\n    })), copied ? /*#__PURE__*/React.createElement(\"span\", {\n      className: \"text-success copy-code-text\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 19\n      }\n    }, \"Copied\") : null, /*#__PURE__*/React.createElement(OverlayTrigger, {\n      placement: \"top\",\n      overlay: /*#__PURE__*/React.createElement(Tooltip, {\n        className: \"m-0\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 50\n        }\n      }, \"Copy to clipboard\"),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CopyToClipboard, {\n      text: code,\n      onCopy: handleCopy,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      size: \"sm\",\n      variant: \"primary\",\n      className: \"copy-code-button\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }\n    }, \"Copy\")))));\n  };\n\n  return /*#__PURE__*/React.createElement(Highlight, {\n    Prism: Prism,\n    code: code,\n    language: language,\n    theme: themeStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, CodeStyling);\n});","map":{"version":3,"sources":["/Users/oisinlyons/Downloads/volt-pro-react-v1.1.0/src/components/Code.js"],"names":["React","useState","CopyToClipboard","Card","Button","Tooltip","OverlayTrigger","Highlight","Prism","themeStyle","props","code","language","copied","setCopied","handleCopy","setTimeout","CodeStyling","className","style","tokens","getLineProps","getTokenProps","map","line","i","key","token"],"mappings":"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","sourcesContent":["\nimport React, { useState } from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { Card, Button, Tooltip, OverlayTrigger } from 'react-bootstrap';\nimport Highlight, { Prism } from 'prism-react-renderer';\n\nimport themeStyle from \"assets/syntax-themes/ghcolors.json\";\n\nexport default (props) => {\n  const { code = \"\", language = \"jsx\" } = props;\n  const [copied, setCopied] = useState(false);\n\n  const handleCopy = () => {\n    setCopied(true);\n    setTimeout(() => setCopied(false), 1500);\n  };\n\n  const CodeStyling = ({ className, style, tokens, getLineProps, getTokenProps }) => (\n    <Card className=\"position-relative pe-8 mb-2\">\n      <Card.Body>\n        <pre className={`${className} mb-0`} style={style}>\n          {tokens.map((line, i) => (\n            <div {...getLineProps({ line, key: i })}>\n              {line.map((token, key) => <span {...getTokenProps({ token, key })} />)}\n            </div>\n          ))}\n        </pre>\n\n        {copied ? <span className=\"text-success copy-code-text\">Copied</span> : null}\n\n        <OverlayTrigger placement=\"top\" overlay={<Tooltip className=\"m-0\">Copy to clipboard</Tooltip>}>\n          <CopyToClipboard text={code} onCopy={handleCopy}>\n            <Button size=\"sm\" variant=\"primary\" className=\"copy-code-button\">Copy</Button>\n          </CopyToClipboard>\n        </OverlayTrigger>\n      </Card.Body>\n    </Card>\n  );\n\n  return (\n    <Highlight Prism={Prism} code={code} language={language} theme={themeStyle}>\n      {CodeStyling}\n    </Highlight>\n  );\n};\n\n"]},"metadata":{},"sourceType":"module"}